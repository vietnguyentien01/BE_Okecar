import { FilterQuery, Model } from 'mongoose';
import { IListRequest } from '../../shared/common/interfaces';
import { STATUS } from '../../shared/constants';
import { CarCompanyEntity } from '../carCompany/entities/car-company.entity';
import { CarCompany } from '../carCompany/model/car-company.schema';
import { NotificationService } from '../notification/notification.service';
import { UserEntity } from '../users/entities/user.entity';
import { User } from '../users/model/user.schema';
import { FilterProduct } from './dto/filter-product';
import { ProductCreateDto } from './dto/product-create.dto';
import { Product } from './model/product.schema';
export declare class ProductService {
    private readonly ProductModel;
    private readonly CarCompanyModel;
    private readonly UserModel;
    private readonly notificationService;
    constructor(ProductModel: Model<Product>, CarCompanyModel: Model<CarCompany>, UserModel: Model<User>, notificationService: NotificationService);
    createProduct(doc: ProductCreateDto, userId: string): Promise<void>;
    getList(args: IListRequest, options?: FilterProduct): Promise<{
        data: {
            company: CarCompanyEntity;
            user: UserEntity;
            id: string;
            avatar: import("../../interfaces/image").IImage[];
            videoLink: string;
            carCompanyId: string;
            vehiclesId: string;
            versionName: string;
            year: number;
            carStatus: import("../../shared/constants").CAR_STATUS;
            origin: import("../../shared/constants").ORIGIN;
            gear: string;
            fuel: string;
            color: string;
            price: number;
            kilometers: number;
            vehicleQuality: string;
            title: string;
            description: string;
            location: string;
            nameSeller: string;
            phoneSeller: string;
            addressSeller: string;
            userId: string;
            status: STATUS;
            createdAt: Date;
        }[];
        meta: {
            limit: number;
            offset: number;
            total: any;
            totalPages: number;
        };
    }>;
    pickQueries(options?: FilterProduct): FilterQuery<Product>;
    updateProductStatus(id: string, status: STATUS): Promise<Product>;
    getOne(id: string): Promise<{
        company: CarCompanyEntity;
        user: UserEntity;
        id: string;
        avatar: import("../../interfaces/image").IImage[];
        videoLink: string;
        carCompanyId: string;
        vehiclesId: string;
        versionName: string;
        year: number;
        carStatus: import("../../shared/constants").CAR_STATUS;
        origin: import("../../shared/constants").ORIGIN;
        gear: string;
        fuel: string;
        color: string;
        price: number;
        kilometers: number;
        vehicleQuality: string;
        title: string;
        description: string;
        location: string;
        nameSeller: string;
        phoneSeller: string;
        addressSeller: string;
        userId: string;
        status: STATUS;
        createdAt: Date;
    }>;
    filterTypeObject(data: any[], objectId: string): any;
}
